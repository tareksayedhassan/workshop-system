generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum Permissions {
  CREATE
  UPDATE
  DELETE
  READ
}

enum ProductStatus {
  available
  unavailable
}

model User {
  id          Int              @id @default(autoincrement())
  name        String
  email       String           @unique
  password    String
  permissions UserPermission[]

  Noitfactions       Notification[]       @relation("TriggeredBy")
  Product            Product[]            @relation("AddedProductBy")
  updatedbyProducts  Product[]            @relation("UpdatedProductBy")
  product_categories Cars_brand[]         @relation("AddedProductBy")
  ProductTransaction ProductTransaction[] @relation("productTrasaction")
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt
}

model UserPermission {
  id         Int         @id @default(autoincrement())
  user       User        @relation(fields: [userId], references: [id])
  userId     Int
  permission Permissions
}

model Notification {
  id                    Int      @id @default(autoincrement())
  message               String   @db.Text
  createdAt             DateTime @default(now())
  userId                Int?
  redirectUrl           String?
  user                  User?    @relation("TriggeredBy", fields: [userId], references: [id])

  @@index([userId])
}

model Product {
  id             Int                  @id @default(autoincrement())
  productCode    String?             
  name           String
  price_scoda    Float?
  price_odie     Float?
  price_flox     Float?
  price_syeat    Float?
  Model          String
  Status         ProductStatus        @default(available)
  createdAt      DateTime             @default(now())
  updatedAt      DateTime             @updatedAt
  addedById      Int?
  addedBy        User?                @relation("AddedProductBy", fields: [addedById], references: [id])
  updatedById    Int?
  updatedBy      User?                @relation("UpdatedProductBy", fields: [updatedById], references: [id])
  cateId         Int
  Categories     Cars_brand?          @relation("categoryes", fields: [cateId], references: [id])
  ProTransaction ProductTransaction[] @relation("transaction")

  @@index([name])
  @@index([productCode])
  @@index([addedById])
  @@index([updatedById])
}

model ProductTransaction {
  id        Int      @id @default(autoincrement())
  proId     Int
  Products  Product  @relation("transaction", fields: [proId], references: [id], onDelete: Cascade)
  userId    Int
  user      User     @relation("productTrasaction", fields: [userId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Cars_brand {
  id           Int           @id @default(autoincrement())
  cate_name    String
  Pro_relation Product[]     @relation("categoryes")
  models       cars_Models[] @relation("models")
  Brand_logo   String?       @default("/assts/defult.png")
  note         String
  addedById    Int?
  addedBy      User?         @relation("AddedProductBy", fields: [addedById], references: [id])
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt

  @@index([cate_name])
  @@index([addedById])
}

model cars_Models {
  id    Int         @id @default(autoincrement())
  name  String
  carId Int?
  Cars  Cars_brand? @relation("models", fields: [carId], references: [id], onDelete: Cascade)
}
