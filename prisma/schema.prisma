generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum Permissions {
  CREATE
  UPDATE
  DELETE
  READ
}

enum ProductStatus {
  available
  unavailable
}

enum Roles {
  Wrater
  ReaderAndwrater
}

model User {
  id                 Int                   @id @default(autoincrement())
  name               String
  email              String                @unique
  password           String
  permissions        UserPermission[]
  role               Roles
  Noitfactions       Notification[]        @relation("TriggeredBy")
  Product            Product[]             @relation("AddedProductBy")
  updatedbyProducts  Product[]             @relation("UpdatedProductBy")
  product_categories Cars_brand[]          @relation("AddedProductBy")
  ProductTransaction ProductTransaction[]  @relation("productTrasaction")
  Models             cars_Models[]         @relation("TriggerBy")
  MaintenanceTable   MaintenanceTable[]    @relation("TriggerBy")
  MaintenancePrducts MaintenanceProducts[] @relation("TriggerBy")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model UserPermission {
  id         Int         @id @default(autoincrement())
  user       User        @relation(fields: [userId], references: [id])
  userId     Int
  permission Permissions
}

model Notification {
  id          Int      @id @default(autoincrement())
  message     String   @db.Text
  createdAt   DateTime @default(now())
  userId      Int?
  redirectUrl String?
  user        User?    @relation("TriggeredBy", fields: [userId], references: [id])

  @@index([userId])
}

model Product {
  id          Int     @id @default(autoincrement())
  productCode String?
  name        String

  price ProductPrice[] @relation("price")

  Model               String
  Status              ProductStatus         @default(available)
  createdAt           DateTime              @default(now())
  updatedAt           DateTime              @updatedAt
  addedById           Int?
  addedBy             User?                 @relation("AddedProductBy", fields: [addedById], references: [id])
  updatedById         Int?
  updatedBy           User?                 @relation("UpdatedProductBy", fields: [updatedById], references: [id])
  ProTransaction      ProductTransaction[]  @relation("transaction")
  models              cars_Models[]         @relation("products")
  MaintenanceProducts MaintenanceProducts[] @relation("MaintenanceProducts")

  @@index([name])
  @@index([productCode])
  @@index([addedById])
  @@index([updatedById])
}

model ProductPrice {
  id        Int         @id @default(autoincrement())
  price     Float?
  productId Int?
  Product   Product?    @relation("price", fields: [productId], references: [id], onDelete: Cascade)
  BrandId   Int?
  Brands    Cars_brand? @relation("brand", fields: [BrandId], references: [id])
}

model ProductTransaction {
  id        Int      @id @default(autoincrement())
  proId     Int
  Products  Product  @relation("transaction", fields: [proId], references: [id], onDelete: Cascade)
  userId    Int
  user      User     @relation("productTrasaction", fields: [userId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Cars_brand {
  id           Int                   @id @default(autoincrement())
  cate_name    String
  models       cars_Models[]         @relation("models")
  Brand_logo   String?               @default("/assts/defult.png")
  note         String?
  price        ProductPrice[]        @relation("brand")
  addedById    Int?
  CarsProducts MaintenanceProducts[] @relation("MaintenanceProducts")
  addedBy      User?                 @relation("AddedProductBy", fields: [addedById], references: [id])
  createdAt    DateTime              @default(now())
  updatedAt    DateTime              @updatedAt

  @@index([cate_name])
  @@index([addedById])
}

model cars_Models {
  id          Int                @id @default(autoincrement())
  modelName   String
  engineCC    Int
  carId       Int?
  Cars        Cars_brand?        @relation("models", fields: [carId], references: [id], onDelete: Cascade)
  ProductId   Int?
  Products    Product?           @relation("products", fields: [ProductId], references: [id])
  userId      Int
  Maintenance MaintenanceTable[] @relation("Maintenance Table")
  user        User               @relation("TriggerBy", fields: [userId], references: [id])
  MaintenanceProducts             MaintenanceProducts[] @relation("MaintenanceModels")
  createdAt   DateTime           @default(now())
  updateAt    DateTime           @updatedAt

  @@index([engineCC])
}

model MaintenanceTable {
  id        Int          @id @default(autoincrement())
  name      String
  modelId   Int?
  model     cars_Models? @relation("Maintenance Table", fields: [modelId], references: [id], onDelete: Cascade)
  MaintenanceProducts MaintenanceProducts[] @relation("MaintenanceProducts")
  userId    Int
  user      User         @relation("TriggerBy", fields: [userId], references: [id])
  createdAt DateTime     @default(now())
  updateAt  DateTime     @updatedAt
}

model MaintenanceProducts {
  id        Int         @id @default(autoincrement())
  carId     Int?
  Car       Cars_brand? @relation("MaintenanceProducts", fields: [carId], references: [id])
ModeleId Int
Modele   cars_Models? @relation("MaintenanceModels", fields: [ModeleId], references: [id])

 MaintenanceTableId   Int
 Maintenance          MaintenanceTable @relation("MaintenanceProducts" , fields: [MaintenanceTableId] , references: [id])
 price          Float
  tax       Float
  Quantity  Int
  ProductId Int?
  Products  Product?    @relation("MaintenanceProducts", fields: [ProductId], references: [id])
  userId    Int
  user      User        @relation("TriggerBy", fields: [userId], references: [id])
  createdAt DateTime    @default(now())
  updateAt  DateTime    @updatedAt
}
